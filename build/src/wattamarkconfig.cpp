// This file is generated by kconfig_compiler_kf5 from wattamarkconfig.kcfg.
// All changes you do to this file will be lost.

#include "wattamarkconfig.h"

#include <qglobal.h>
#include <QFile>

class WattaMarkConfigHelper
{
  public:
    WattaMarkConfigHelper() : q(nullptr) {}
    ~WattaMarkConfigHelper() { delete q; q = nullptr; }
    WattaMarkConfigHelper(const WattaMarkConfigHelper&) = delete;
    WattaMarkConfigHelper& operator=(const WattaMarkConfigHelper&) = delete;
    WattaMarkConfig *q;
};
Q_GLOBAL_STATIC(WattaMarkConfigHelper, s_globalWattaMarkConfig)
WattaMarkConfig *WattaMarkConfig::self()
{
  if (!s_globalWattaMarkConfig()->q) {
    new WattaMarkConfig;
    s_globalWattaMarkConfig()->q->read();
  }

  return s_globalWattaMarkConfig()->q;
}

WattaMarkConfig::WattaMarkConfig( QObject *parent )
  : KConfigSkeleton()
{
  setParent(parent);
  Q_ASSERT(!s_globalWattaMarkConfig()->q);
  s_globalWattaMarkConfig()->q = this;
  KConfigCompilerSignallingItem::NotifyFunction notifyFunction = static_cast<KConfigCompilerSignallingItem::NotifyFunction>(&WattaMarkConfig::itemChanged);

  setCurrentGroup( QStringLiteral( "General" ) );

  KConfigCompilerSignallingItem  *itemSomeSetting;
  KConfigSkeleton::ItemBool  *innerItemSomeSetting;
  innerItemSomeSetting = new KConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "someSetting" ), mSomeSetting, true );
  itemSomeSetting = new KConfigCompilerSignallingItem(innerItemSomeSetting, this, notifyFunction, signalSomeSettingChanged);
  addItem( itemSomeSetting, QStringLiteral( "someSetting" ) );
}

bool WattaMarkConfig::defaultSomeSettingValue_helper()
{

  return true;
}

WattaMarkConfig::~WattaMarkConfig()
{
  if (s_globalWattaMarkConfig.exists() && !s_globalWattaMarkConfig.isDestroyed()) {
    s_globalWattaMarkConfig()->q = nullptr;
  }
}


void WattaMarkConfig::itemChanged(quint64 flags) {

  if ( flags & signalSomeSettingChanged ) {
    Q_EMIT someSettingChanged();
  }
}

#include "wattamarkconfig.moc"

